{\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset2 Symbol;}}
{\colortbl ;\red255\green255\blue0;\red255\green0\blue0;\red0\green255\blue0;\red0\green255\blue255;}
{\*\generator Riched20 10.0.22000}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\b\f0\fs22\lang10 Problemas Generales de dise\'f1o:\b0\par
Hacer toda la logica dentro de la smismas clases, y que en el main lo unico que haya sean las conecciones con el timer principal, y el flujo de las pantallas que se mostraran.\par
inicialisar todo objeto pasandole todos los parametros necesarios para que esta pueda funcionar sin necesidad de mandar alguna se\'f1al, o salirce a otra clase.\par
por ejemplo, el personaje necesita la matriz del juego, para poder moverse, y neccesita los enemigos para saber donde estan y poder colisionar con ellos(es mejor hacer la colision de los enemigos dentro de la clase enemigo y que estos colisionen con el personaje.) el timer que le pase no es necesario, amenos que vaya a conectar algo desde personaje con el timer principal y lo mas fundamental es pasarle la escena, que sea el mismo personaje el se agrege asi mismo a la escena.\par
Otro error, es usar se\'f1ales con cosas que realmente no son pararelas, osea la primera ve que las use las pense como algo para hacer la comunicacion entre clases, pero realmente esa comunicacion la pueda interna dentro de las mismas clases solo pasando la informacion de ellas como propiedades dentro de la clase donde se hara el proceso.\par
por ejemplo, para quitar un bloque por culpa de una explosion, lo que hacia era mandar una se\'f1al que indicaba que bomba destruir, pero realmente me puedo ahorrar dicha se\'f1al, y eliminar dicha desde el mismo objeto explosion, con solo pasarle la escena (y la manera en que se le indique a la explosion que bloque es.)\par
Algo parecido con el lcd.\par
Dentro de los constructores de cada clase, hacer todo lo necesario para inicializarlos.\par
Con la clase enemigo, sus posiciones se generna de manera aleatoria, esto lo podrian haber hecho dentro de la misma clase, dentro del mismo constructor y pasandole la escena, y los bloques, y la matriz, habersse agregado a la escena desde el mismo constructor, ni tampoco necesitaba iniciarlo con dos timer, con solo el timer clockgame, conectandolo desde el mainwindows con las funciones que lo necesitasen y que se inician an paralelo era mas que suficiente.\par
Todos los slots me los hubiera ahorrado literalmente de remove y se\'f1ale sde remove me los hubiera ahorrado.\par
\b Problemas de dise\'f1o mas especificas:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 MainWindow:\b0  \par

\pard\li1080\sa200\sl276\slmult1 Hacer funciones que simplemente me cargen los distintos escenarios que se mostraran, una funcion que muestre la pantalla del menu principal, otra que cargue la escena del juego, otra que cargue el escenario 2 etc. Tambien los keypresevent se hacen aqui, y hacer las conecciones con las funciones que se realizaran en pararelo al codigo principal de los distintos objetos, como por ejemplo conectar el timer con el movmiento de cada uno de los enemigos, o pasarle el timer a cada enemigo por el constructor y que internamente se haga dicha conexion.\par
Los slots que hice, horribles, cada cosa que hacen los remove, se pueden hacer tranquilamente dentro de las mismas clases con solo pasandoles la escena.\par
hasta depronto pasarle el UI que hagan internamente las comunicaciones con los elementos de al interfaz grafica internamente. Este tipo de cosas, como cambiar el numero de vidas del LCD cuando el personajes muere, no hay necesidad de usar se\'f1al, psando el apuntador al LCD al personajes, cuando este muere por la colision con algun objeto(enemigo, explosion o tiempo) se actualise en ese mismo instante en que muere el personajes y ya esta.\par
Con respecto a sus propiedades, estan bien, lo unico a tener en cuenta es no usar arreglos, ya que los arreglos son muy complicados de pasar atraves de punteros. es mejor tener vectores o una matriz con new. \par
cambiar todas las funciones por loadEnemies, loadPlayer etc, que realmente lo que hacen seria iniciar el constructor de la clase player, o iniciar el constructor de la clase enemigo, guardar dicho enemigo dentro de un contenedor, y luego volver a llamar el constructor de enemigo para crear uno nueo y agregarlo, y hacer esto cuantas veces sea necesario.\par
Literalmente, toda la line de codigo de cada una de esas funciones put, se deberian de hacer en 1 o 3. La de personajes, solo seria llamar un puntero a personaje y crear un nuevo un nuevo personajes usando el constructor que recibira la matrizgame, escenario y el timer y todo lo demas necesario para que funcione dicha clase para luego iniciar dicho personaj con todo lo correspondiente incluyendo ponerce asi mismo dentro de la escena. y lo mismo para todo lo demas que se inicializa con el escenario. \par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b Objeto:\b0\par

\pard\li1080\sa200\sl276\slmult1 Todas las clases tendran si o si un sprite y un frame que se muestra en pantalla el cual se carga directamente del sprite. El resto de atributos, por ejemplo la vel, o la funciones de movimiento, no las tienen el resto de clases, Asi que hacer que un bloque estatico herede dicha clase, sabiendo que la vel o las funciones de movimiento no le serviran, es como una gran estupides. Aunque esto no supone ningun problema, y que se inicia la velocidad de un bloque en 0, y si quisiera hacer un bloque que se mueva, seria sencillo aunque no se bien. Lo unico seguro es que hereden lo correspondiente al manejo de sprite principal y size (width y height) y talvez hacer una clase aparte que de atribito de movimiento, de esta hipoteticaclase, heredarian los bloques que se moverian, los enemigos, el personajes y todo lo demas con movimiento, seria una herencia doble.\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b Personaje:\b0\par

\pard\li1440\sa200\sl276\slmult1 Las propiedades, deberia de tener dentro de ellas apuntadores hacia los contenedores de los objetos con los que vaya a interactuar o que sean necesario para su funcionamiento.\par

\pard\li720\sa200\sl276\slmult1 Por ejemplo el contenedor con la informacion del mapa, bloques, los enemigo o explosiones si es que se hace la interaccion en esta misma clase.\par
\highlight1 Crear un constructor que al llamarce inicie la clase con todo lo necesario para iniciar el juego incluyendo que se agregue el mismo a la escena. Asi que tocaria tener un atributo que fuece el apuntador a la escena.\par
\highlight0 Hacer la colision internamente con el personaje es una estupides, es mejor hacer la colision del enemigo con el personaje, solo habria que pasar el apuntador del personaje a cada enemigo, y que cada uno revise si colisiona con el personaje, es mucho mas facil hacerlo asi.\par
Esas se\'f1ales de cambio de estados (vidas, puntaje, estado vivo o muerto, etc) no son necesario, \highlight2 con solo pasar el ui, \highlight0 ya se puede actualizar el lcd del conteo de vidas dentro de la misma clase en el momento en que muere sin necesidad de ninguna se\'f1al. Lo unico necesario seria un contador para que al momento de cambiar su  estado a muerto, por medio del timer del juego, este vuelva a su estado vivo siempre y cuando le quedden vidas, osino talvez ahi si mandar una se\'f1al de que se acabo el juego para cambiar de pantalla. El resto de cosas estan bien, podriar hacer la clase aumentos, que modifican los demas atributos.\par
\highlight1 Veo que lo ideal es crear funciones en el main windows que actualizen los distintos elementos de la interfaz, y luego pasar un apuntador al mainwindow y cambiar esos elemento desde las clases usando dichas funciones.\par
\highlight3 La idea de hacer que cada constructor reciba un apuntador al MainWindows(this), y que cada atributo se actualize usando getters del mainwindow es de las mejores cosas que se me han ocurrido.\par
\highlight4 Putbomb que todo el proceso de poner la bomba se haga internamente. Desde mirar si puede ponerla, hasta crearla la bomba, inicializarla con todos los parametros que necesite y ponerla y hacer las conecciones.\par
\highlight0 Primero es mirar si se puede poner la bomba, esto lo meto dentro de otra funcion privada.\par
Despues la Bomba cuando termine de contar su contador interno, tenga una funcion que hace que se elimine asi misma, que seria explotar(); y desde ahi la bomba tiene que ser capaz de eliminarse asi misma, y crear las distintas explosiones, con la informacion y todo loq ue encesiten para comenzar e interactuar.\par
Con respecto a la colision con un enemig, morir y actualizar la tabla, lo mejor seria que al momento de morir, en vez de llamar una se\'f1al, es mejor hacer todo dentro de la misma funcion, actualizar las vidas del jugador, del lcd y luego activar la animacion de muerte.\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li360\sa200\sl276\slmult1\b Bomba:\b0\par

\pard\li720\sa200\sl276\slmult1 El personajes pondra una bomba: 1.mira si la puede poner, 2.calcula las coordenadas. 3.se crea una bomba llamando el constructor tendra todo el proceso de ponerla, por ende, el constructor le entraran las coordenadas de la bomba, y el main que tiene todo lo necesario para ponerla. Solo se conectara el timer con explote.\par
Primero, usay el mismo reloj del juego para que explote la bomba y conectarlo con la funcion que explota y controlar el tiempo que se demora en explotar con un contador interno.\par
Despues de que se cuenta el contador, se desconecte dicho proceso, y empiza la explosion. Esto incluye que desde ahi dentro la bomba sea capaz de destruir los bloques, de poner todas las explosiones y de removerse y eliminarce asi misma. Todo dentro de la funcion explote.\par
Habrian que calcular las explosiones, y los bloques a destruir, y las bombas a explotar. e ir agregando una explosion a una, asi me evito usar contenedores.\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li360\sa200\sl276\slmult1\b Explosion:\b0\par

\pard\li720\sa200\sl276\slmult1 Despues de que la bomba explote, esta va creando las explosiones, primero se calcula posicion de la explosion, luego se llama el constructor que recibe el mainwindows y la pos de la bomba como parametros, y ahi dentro se inicia como se debe de iniciar hasta poniendoce en la escena e iniciando su coneccion con desaparecer.\par
Para cada direccion, se recorre un ciclo for hasta la pot de la bomba, si encuentra un 0 para el ciclo, si encuentra un 9 se pone la explosion y sigue, si encuentra un 1 o un 2 la explosion se pone y para el ciclo.\par
mientras se vayan calculando las posiciones, se haran el respectiva destruccion de los bloques.\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 explotion = new Explotion;\par
{\pntext\f1\'B7\tab}explotion->setPos(x(), y()+(i*size));\par
{\pntext\f1\'B7\tab}explotions.push_back(explotion);\par
{\pntext\f1\'B7\tab}connect(explotion, &Explotion::remove, this, &MainWindow::removeExplotion);\par
{\pntext\f1\'B7\tab}connect(timer, &QTimer::timeout, explotion, &Explotion::collidingWithEnemy);\par
{\pntext\f1\'B7\tab}connect(timer, &QTimer::timeout, explotion, &Explotion::collidingWithPlayer);\par
{\pntext\f1\'B7\tab}explotion->setEnemigos(enemigos);\par
{\pntext\f1\'B7\tab}explotion->setPersonaje(personaje);\par
{\pntext\f1\'B7\tab}explotion->setGameClock(timer);\par
{\pntext\f1\'B7\tab}explotion->start();\par
{\pntext\f1\'B7\tab}escena->addItem(explotion);\par

\pard\li1080\sa200\sl276\slmult1 un gran error es destruir los bloques por fuera, asi que cada vez que se calcule que la explosion e pondra encima de un bloque destruible, de una vez activar su delay para que se destruya y que se destruya el mismo.\par
Tambien que solo conecte ocn un unico timer y que tenga un contador que controle el delay.\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li360\sa200\sl276\slmult1\b Enemigo:\b0\par

\pard\li720\sa200\sl276\slmult1 El constructo debe de generar el enemigo, eso inclulye generar sus posiciones aleatorias, ponerlo en escena, y definir su tipo y pasarle toda la informacion enccesaria para que este pueda funcionar bien.\par
Divir la generacion de posiciona leatoria en un problema aparte y que usar la funcion dentro del mismo constructor.\par
Con respecto a las conecciones.\par
Se conecta una se\'f1al, que cuando el estado del enemigo cambia, se inicia su muerte, y otra que cuando termina toda la animacion de muerte, se activa el remove.\par
La idea e shacer todo esto dentro de la misma clase que se encarga de interactuar y eliminarla.\par
Asi si muere por culpa de la explosion, dentro de la misma explosion, se cambiara el estado del enemigo,  se iniciara su animacion de muerte, y dentro de la misma animacion de muerte del enemigo se eliminara de la escena. \par
\par

\pard\sa200\sl276\slmult1\b Mas Problemas de dise\'f1o:\par
\b0 Un problema con las animaciones. La idea es hacer que dentro de cada clase que interactua y elimina otra calse, se haga todo el proceso dentro de dicha clase. Si el enemigo muere por culpa de una explosion, que dentro de la explosion, en la misma funcion de colision, se haga todo el proceso de eliminar al personaje dentro de la misma explosion, que cambie el estado, que conecte la animacion de muerte y dentro de la misma se quite de la escena.\par
Lo que se me ocurre es hacer una unica funcion dentro de cada clase que se encargue de ese proceso, asi solo tendria que escribir un unico codigo, el cual se llamara en el momento de eliminar dentro de la clase con la que interactuo o lo mato.\par
Dentro de la clase personaje habra un funcion que sea morir, que actualize su estado, hga la animacion y lo ponga de nuevo en el origen cambiando su  estado a vido, y esta se llamara dentro del enemigo que colisione y dentro de la explosion.\par

\pard\li720\sa200\sl276\slmult1\par
 \par

\pard\li1080\sa200\sl276\slmult1     \par

\pard\sa200\sl276\slmult1\par
}
 